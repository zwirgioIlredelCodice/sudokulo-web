use wasm_bindgen::prelude::*;
extern crate web_sys;

// A macro to provide `println!(..)`-style syntax for `console.log` logging.
macro_rules! log {
    ( $( $t:tt )* ) => {
        web_sys::console::log_1(&format!( $( $t )* ).into())
    }
}


const PRECALC: [[i32; 21]; 81] = [
    [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 18, 27, 36, 45, 54, 63, 72, 10, 19, 11, 20,
    ],
    [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 19, 28, 37, 46, 55, 64, 73, 9, 18, 11, 20,
    ],
    [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 20, 29, 38, 47, 56, 65, 74, 9, 18, 10, 19,
    ],
    [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 21, 30, 39, 48, 57, 66, 75, 13, 22, 14, 23,
    ],
    [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 22, 31, 40, 49, 58, 67, 76, 12, 21, 14, 23,
    ],
    [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 23, 32, 41, 50, 59, 68, 77, 12, 21, 13, 22,
    ],
    [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 15, 24, 33, 42, 51, 60, 69, 78, 16, 25, 17, 26,
    ],
    [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 25, 34, 43, 52, 61, 70, 79, 15, 24, 17, 26,
    ],
    [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 17, 26, 35, 44, 53, 62, 71, 80, 15, 24, 16, 25,
    ],
    [
        9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 18, 27, 36, 45, 54, 63, 72, 1, 19, 2, 20,
    ],
    [
        9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 19, 28, 37, 46, 55, 64, 73, 0, 18, 2, 20,
    ],
    [
        9, 10, 11, 12, 13, 14, 15, 16, 17, 2, 20, 29, 38, 47, 56, 65, 74, 0, 18, 1, 19,
    ],
    [
        9, 10, 11, 12, 13, 14, 15, 16, 17, 3, 21, 30, 39, 48, 57, 66, 75, 4, 22, 5, 23,
    ],
    [
        9, 10, 11, 12, 13, 14, 15, 16, 17, 4, 22, 31, 40, 49, 58, 67, 76, 3, 21, 5, 23,
    ],
    [
        9, 10, 11, 12, 13, 14, 15, 16, 17, 5, 23, 32, 41, 50, 59, 68, 77, 3, 21, 4, 22,
    ],
    [
        9, 10, 11, 12, 13, 14, 15, 16, 17, 6, 24, 33, 42, 51, 60, 69, 78, 7, 25, 8, 26,
    ],
    [
        9, 10, 11, 12, 13, 14, 15, 16, 17, 7, 25, 34, 43, 52, 61, 70, 79, 6, 24, 8, 26,
    ],
    [
        9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 26, 35, 44, 53, 62, 71, 80, 6, 24, 7, 25,
    ],
    [
        18, 19, 20, 21, 22, 23, 24, 25, 26, 0, 9, 27, 36, 45, 54, 63, 72, 1, 10, 2, 11,
    ],
    [
        18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 10, 28, 37, 46, 55, 64, 73, 0, 9, 2, 11,
    ],
    [
        18, 19, 20, 21, 22, 23, 24, 25, 26, 2, 11, 29, 38, 47, 56, 65, 74, 0, 9, 1, 10,
    ],
    [
        18, 19, 20, 21, 22, 23, 24, 25, 26, 3, 12, 30, 39, 48, 57, 66, 75, 4, 13, 5, 14,
    ],
    [
        18, 19, 20, 21, 22, 23, 24, 25, 26, 4, 13, 31, 40, 49, 58, 67, 76, 3, 12, 5, 14,
    ],
    [
        18, 19, 20, 21, 22, 23, 24, 25, 26, 5, 14, 32, 41, 50, 59, 68, 77, 3, 12, 4, 13,
    ],
    [
        18, 19, 20, 21, 22, 23, 24, 25, 26, 6, 15, 33, 42, 51, 60, 69, 78, 7, 16, 8, 17,
    ],
    [
        18, 19, 20, 21, 22, 23, 24, 25, 26, 7, 16, 34, 43, 52, 61, 70, 79, 6, 15, 8, 17,
    ],
    [
        18, 19, 20, 21, 22, 23, 24, 25, 26, 8, 17, 35, 44, 53, 62, 71, 80, 6, 15, 7, 16,
    ],
    [
        27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 9, 18, 36, 45, 54, 63, 72, 37, 46, 38, 47,
    ],
    [
        27, 28, 29, 30, 31, 32, 33, 34, 35, 1, 10, 19, 37, 46, 55, 64, 73, 36, 45, 38, 47,
    ],
    [
        27, 28, 29, 30, 31, 32, 33, 34, 35, 2, 11, 20, 38, 47, 56, 65, 74, 36, 45, 37, 46,
    ],
    [
        27, 28, 29, 30, 31, 32, 33, 34, 35, 3, 12, 21, 39, 48, 57, 66, 75, 40, 49, 41, 50,
    ],
    [
        27, 28, 29, 30, 31, 32, 33, 34, 35, 4, 13, 22, 40, 49, 58, 67, 76, 39, 48, 41, 50,
    ],
    [
        27, 28, 29, 30, 31, 32, 33, 34, 35, 5, 14, 23, 41, 50, 59, 68, 77, 39, 48, 40, 49,
    ],
    [
        27, 28, 29, 30, 31, 32, 33, 34, 35, 6, 15, 24, 42, 51, 60, 69, 78, 43, 52, 44, 53,
    ],
    [
        27, 28, 29, 30, 31, 32, 33, 34, 35, 7, 16, 25, 43, 52, 61, 70, 79, 42, 51, 44, 53,
    ],
    [
        27, 28, 29, 30, 31, 32, 33, 34, 35, 8, 17, 26, 44, 53, 62, 71, 80, 42, 51, 43, 52,
    ],
    [
        36, 37, 38, 39, 40, 41, 42, 43, 44, 0, 9, 18, 27, 45, 54, 63, 72, 28, 46, 29, 47,
    ],
    [
        36, 37, 38, 39, 40, 41, 42, 43, 44, 1, 10, 19, 28, 46, 55, 64, 73, 27, 45, 29, 47,
    ],
    [
        36, 37, 38, 39, 40, 41, 42, 43, 44, 2, 11, 20, 29, 47, 56, 65, 74, 27, 45, 28, 46,
    ],
    [
        36, 37, 38, 39, 40, 41, 42, 43, 44, 3, 12, 21, 30, 48, 57, 66, 75, 31, 49, 32, 50,
    ],
    [
        36, 37, 38, 39, 40, 41, 42, 43, 44, 4, 13, 22, 31, 49, 58, 67, 76, 30, 48, 32, 50,
    ],
    [
        36, 37, 38, 39, 40, 41, 42, 43, 44, 5, 14, 23, 32, 50, 59, 68, 77, 30, 48, 31, 49,
    ],
    [
        36, 37, 38, 39, 40, 41, 42, 43, 44, 6, 15, 24, 33, 51, 60, 69, 78, 34, 52, 35, 53,
    ],
    [
        36, 37, 38, 39, 40, 41, 42, 43, 44, 7, 16, 25, 34, 52, 61, 70, 79, 33, 51, 35, 53,
    ],
    [
        36, 37, 38, 39, 40, 41, 42, 43, 44, 8, 17, 26, 35, 53, 62, 71, 80, 33, 51, 34, 52,
    ],
    [
        45, 46, 47, 48, 49, 50, 51, 52, 53, 0, 9, 18, 27, 36, 54, 63, 72, 28, 37, 29, 38,
    ],
    [
        45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 10, 19, 28, 37, 55, 64, 73, 27, 36, 29, 38,
    ],
    [
        45, 46, 47, 48, 49, 50, 51, 52, 53, 2, 11, 20, 29, 38, 56, 65, 74, 27, 36, 28, 37,
    ],
    [
        45, 46, 47, 48, 49, 50, 51, 52, 53, 3, 12, 21, 30, 39, 57, 66, 75, 31, 40, 32, 41,
    ],
    [
        45, 46, 47, 48, 49, 50, 51, 52, 53, 4, 13, 22, 31, 40, 58, 67, 76, 30, 39, 32, 41,
    ],
    [
        45, 46, 47, 48, 49, 50, 51, 52, 53, 5, 14, 23, 32, 41, 59, 68, 77, 30, 39, 31, 40,
    ],
    [
        45, 46, 47, 48, 49, 50, 51, 52, 53, 6, 15, 24, 33, 42, 60, 69, 78, 34, 43, 35, 44,
    ],
    [
        45, 46, 47, 48, 49, 50, 51, 52, 53, 7, 16, 25, 34, 43, 61, 70, 79, 33, 42, 35, 44,
    ],
    [
        45, 46, 47, 48, 49, 50, 51, 52, 53, 8, 17, 26, 35, 44, 62, 71, 80, 33, 42, 34, 43,
    ],
    [
        54, 55, 56, 57, 58, 59, 60, 61, 62, 0, 9, 18, 27, 36, 45, 63, 72, 64, 73, 65, 74,
    ],
    [
        54, 55, 56, 57, 58, 59, 60, 61, 62, 1, 10, 19, 28, 37, 46, 64, 73, 63, 72, 65, 74,
    ],
    [
        54, 55, 56, 57, 58, 59, 60, 61, 62, 2, 11, 20, 29, 38, 47, 65, 74, 63, 72, 64, 73,
    ],
    [
        54, 55, 56, 57, 58, 59, 60, 61, 62, 3, 12, 21, 30, 39, 48, 66, 75, 67, 76, 68, 77,
    ],
    [
        54, 55, 56, 57, 58, 59, 60, 61, 62, 4, 13, 22, 31, 40, 49, 67, 76, 66, 75, 68, 77,
    ],
    [
        54, 55, 56, 57, 58, 59, 60, 61, 62, 5, 14, 23, 32, 41, 50, 68, 77, 66, 75, 67, 76,
    ],
    [
        54, 55, 56, 57, 58, 59, 60, 61, 62, 6, 15, 24, 33, 42, 51, 69, 78, 70, 79, 71, 80,
    ],
    [
        54, 55, 56, 57, 58, 59, 60, 61, 62, 7, 16, 25, 34, 43, 52, 70, 79, 69, 78, 71, 80,
    ],
    [
        54, 55, 56, 57, 58, 59, 60, 61, 62, 8, 17, 26, 35, 44, 53, 71, 80, 69, 78, 70, 79,
    ],
    [
        63, 64, 65, 66, 67, 68, 69, 70, 71, 0, 9, 18, 27, 36, 45, 54, 72, 55, 73, 56, 74,
    ],
    [
        63, 64, 65, 66, 67, 68, 69, 70, 71, 1, 10, 19, 28, 37, 46, 55, 73, 54, 72, 56, 74,
    ],
    [
        63, 64, 65, 66, 67, 68, 69, 70, 71, 2, 11, 20, 29, 38, 47, 56, 74, 54, 72, 55, 73,
    ],
    [
        63, 64, 65, 66, 67, 68, 69, 70, 71, 3, 12, 21, 30, 39, 48, 57, 75, 58, 76, 59, 77,
    ],
    [
        63, 64, 65, 66, 67, 68, 69, 70, 71, 4, 13, 22, 31, 40, 49, 58, 76, 57, 75, 59, 77,
    ],
    [
        63, 64, 65, 66, 67, 68, 69, 70, 71, 5, 14, 23, 32, 41, 50, 59, 77, 57, 75, 58, 76,
    ],
    [
        63, 64, 65, 66, 67, 68, 69, 70, 71, 6, 15, 24, 33, 42, 51, 60, 78, 61, 79, 62, 80,
    ],
    [
        63, 64, 65, 66, 67, 68, 69, 70, 71, 7, 16, 25, 34, 43, 52, 61, 79, 60, 78, 62, 80,
    ],
    [
        63, 64, 65, 66, 67, 68, 69, 70, 71, 8, 17, 26, 35, 44, 53, 62, 80, 60, 78, 61, 79,
    ],
    [
        72, 73, 74, 75, 76, 77, 78, 79, 80, 0, 9, 18, 27, 36, 45, 54, 63, 55, 64, 56, 65,
    ],
    [
        72, 73, 74, 75, 76, 77, 78, 79, 80, 1, 10, 19, 28, 37, 46, 55, 64, 54, 63, 56, 65,
    ],
    [
        72, 73, 74, 75, 76, 77, 78, 79, 80, 2, 11, 20, 29, 38, 47, 56, 65, 54, 63, 55, 64,
    ],
    [
        72, 73, 74, 75, 76, 77, 78, 79, 80, 3, 12, 21, 30, 39, 48, 57, 66, 58, 67, 59, 68,
    ],
    [
        72, 73, 74, 75, 76, 77, 78, 79, 80, 4, 13, 22, 31, 40, 49, 58, 67, 57, 66, 59, 68,
    ],
    [
        72, 73, 74, 75, 76, 77, 78, 79, 80, 5, 14, 23, 32, 41, 50, 59, 68, 57, 66, 58, 67,
    ],
    [
        72, 73, 74, 75, 76, 77, 78, 79, 80, 6, 15, 24, 33, 42, 51, 60, 69, 61, 70, 62, 71,
    ],
    [
        72, 73, 74, 75, 76, 77, 78, 79, 80, 7, 16, 25, 34, 43, 52, 61, 70, 60, 69, 62, 71,
    ],
    [
        72, 73, 74, 75, 76, 77, 78, 79, 80, 8, 17, 26, 35, 44, 53, 62, 71, 60, 69, 61, 70,
    ],
];

struct Bestcell {
    cell: i32,
    nums: Vec<i32>,
}

#[derive(Debug, Clone)]
enum State {
    Complete,
    Incomplete,
    Error,
}

#[derive(Debug, Clone)]
struct SudokuStatus {
    sudoku: [i32; 81],
    status: State,
}

fn legal_nums(sudoku: [i32; 81], cell: i32) -> Vec<i32> {
    let mut arr: [i32; 10] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

    let cell_precalc: [i32; 21] = PRECALC[cell as usize];
    for i in cell_precalc {
        arr[sudoku[i as usize] as usize] = 0;
    }
    let mut v: Vec<i32> = Vec::new();
    for i in arr {
        if i != 0 {
            v.push(i)
        }
    }
    v
}

fn best_cell(sudoku: [i32; 81]) -> Bestcell {
    let mut bescell: Bestcell = Bestcell {
        cell: 0,
        nums: Vec::new(),
    };
    let mut lessnum: i32 = 9;

    for i in 0..81 {
        let v: Vec<i32>;
        if sudoku[i as usize] == 0 {
            v = legal_nums(sudoku, i);
            let len: i32 = v.len() as i32;

            if len == 1 {
                bescell.cell = i;
                bescell.nums = v;
                break;
            } else if len < lessnum {
                lessnum = len;
                bescell.cell = i;
                bescell.nums = v;
            }
        }
    }
    bescell
}

fn solvesudoku(mut s_sudoku: SudokuStatus) -> SudokuStatus {
    match s_sudoku.status {
        State::Complete => return s_sudoku,
        State::Incomplete => {
            let bcell: Bestcell = best_cell(s_sudoku.sudoku);

            match bcell.nums.len() {
                0 => {
                    // see if completed
                    s_sudoku.status = State::Complete;
                    for i in s_sudoku.sudoku {
                        if i == 0 {
                            s_sudoku.status = State::Error;
                        }
                    }
                }
                1 => s_sudoku.sudoku[bcell.cell as usize] = bcell.nums[0],
                _ => {
                    let mut t_s_sudoku: SudokuStatus = s_sudoku.clone();
                    for (i, option) in bcell.nums.iter().enumerate() {
                        t_s_sudoku.sudoku[bcell.cell as usize] = *option;
                        t_s_sudoku = solvesudoku(t_s_sudoku);

                        match t_s_sudoku.status {
                            State::Complete => {
                                s_sudoku = t_s_sudoku;
                                break;
                            }
                            State::Incomplete => {
                                if i + 1 == bcell.nums.len() {
                                    s_sudoku.status = State::Error;
                                } else {
                                    t_s_sudoku = s_sudoku.clone()
                                }
                            }
                            State::Error => {
                                if i + 1 == bcell.nums.len() {
                                    s_sudoku.status = State::Error;
                                } else {
                                    t_s_sudoku = s_sudoku.clone()
                                }
                            }
                        }
                    }
                }
            }
            s_sudoku = solvesudoku(s_sudoku);
        }
        State::Error => return s_sudoku,
    }
    s_sudoku
}

// js function
fn prinsudoku(s_sudoku: SudokuStatus) {
    log!("{:?}", s_sudoku);
}

#[wasm_bindgen]
pub fn sudokufromstr(sudoku_string: &str) {
    /*
    sudoku: [
            0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
    */
    // 006307000004000005100006082205030106000200300900070004050000000010000000008109040
    // 000000000000000000000000000000000000000000000000000000000000000000000000000000000
    // 800000000003600000070090200050007000000045700000100030001000068008500010090000400

    let helpmsg = r#"Usage: [SUDOKUSTRING]
Solve a 9x9 sudoku.

The SUDOKUSTRING is the sequence of number in the sudoku, left to right and top to bottom without any spaces or any newline with empty cells replaced by number 0.
es: '006307000004000005100006082205030106000200300900070004050000000010000000008109040'"#;

    
    if sudoku_string.len() == 81 {
        let mut sudoku: SudokuStatus = SudokuStatus {
            sudoku: [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ],
            status: State::Incomplete,
        };
        for (index, numchar) in sudoku_string.chars().enumerate() {
            sudoku.sudoku[index] = numchar.to_digit(10).expect("only number are allowed") as i32;
        }
        
        sudoku = solvesudoku(sudoku);
        prinsudoku(sudoku);
    }
    else if sudoku_string == "-h" || sudoku_string == "--help" {
        log!("{}", helpmsg);
    } else {
        log!("error in sudoku input format\ntype '--help' or '-h' for help");
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn solveeasy() {
        let mut sudoku: SudokuStatus = SudokuStatus {
            sudoku: [
                9, 8, 5, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 5, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 9, 0, 0, 3, 0, 9, 0, 0, 6, 3, 4, 0, 0, 0, 6,
                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 5, 2, 0, 0, 0, 8, 0, 0, 0, 1,
            ],
            status: State::Incomplete,
        };
        sudoku = solvesudoku(sudoku);
        match sudoku.status {
            State::Complete => assert!(true),
            _ => assert!(false),
        }
    }
    #[test]
    fn solvemedium() {
        let mut sudoku: SudokuStatus = SudokuStatus {
            sudoku: [
                0, 0, 6, 3, 0, 7, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 6, 0, 8, 2, 2,
                0, 5, 0, 3, 0, 1, 0, 6, 0, 0, 0, 2, 0, 0, 3, 0, 0, 9, 0, 0, 0, 7, 0, 0, 0, 4, 0, 5,
                0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 9, 0, 4, 0,
            ],
            status: State::Incomplete,
        };
        sudoku = solvesudoku(sudoku);
        match sudoku.status {
            State::Complete => assert!(true),
            _ => assert!(false),
        }
    }
    #[test]
    fn solvehard() {
        let mut sudoku: SudokuStatus = SudokuStatus {
            sudoku: [
                8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 0, 0, 0, 0, 0, 0, 7, 0, 0, 9, 0, 2, 0, 0, 0,
                5, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 4, 5, 7, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0,
                1, 0, 0, 0, 0, 6, 8, 0, 0, 8, 5, 0, 0, 0, 1, 0, 0, 9, 0, 0, 0, 0, 4, 0, 0,
            ],
            status: State::Incomplete,
        };
        sudoku = solvesudoku(sudoku);
        match sudoku.status {
            State::Complete => assert!(true),
            _ => assert!(false),
        }
    }
}
